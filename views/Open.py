from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, QObject
from .NSTThread import NSTThread
import threading
import time
import numpy as np
import gc

class Open(QObject):

    def __init__(self, nst):
        super().__init__()
        self.nst = nst
        self.main_window = None
        return


    def setupUi(self, MainWindow):
        self.main_window = MainWindow
        # Autogenerated code from Qt designer.
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.resize(1046, 901)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1046, 901))
        MainWindow.setMaximumSize(QtCore.QSize(1046, 901))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lbl_content_image = QtWidgets.QLabel(self.centralwidget)
        self.lbl_content_image.setGeometry(QtCore.QRect(90, 10, 201, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_content_image.sizePolicy().hasHeightForWidth())
        self.lbl_content_image.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_content_image.setFont(font)
        self.lbl_content_image.setTextFormat(QtCore.Qt.PlainText)
        self.lbl_content_image.setObjectName("lbl_content_image")
        self.lbl_style_image = QtWidgets.QLabel(self.centralwidget)
        self.lbl_style_image.setGeometry(QtCore.QRect(770, 10, 161, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_style_image.sizePolicy().hasHeightForWidth())
        self.lbl_style_image.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_style_image.setFont(font)
        self.lbl_style_image.setTextFormat(QtCore.Qt.PlainText)
        self.lbl_style_image.setObjectName("lbl_style_image")
        self.btn_file_select_content = QtWidgets.QPushButton(self.centralwidget)
        self.btn_file_select_content.setGeometry(QtCore.QRect(120, 350, 141, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_file_select_content.sizePolicy().hasHeightForWidth())
        self.btn_file_select_content.setSizePolicy(sizePolicy)
        self.btn_file_select_content.setObjectName("btn_file_select_content")
        self.btn_file_select_style = QtWidgets.QPushButton(self.centralwidget)
        self.btn_file_select_style.setGeometry(QtCore.QRect(790, 350, 141, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_file_select_style.sizePolicy().hasHeightForWidth())
        self.btn_file_select_style.setSizePolicy(sizePolicy)
        self.btn_file_select_style.setObjectName("btn_file_select_style")
        self.lbl_generated_image = QtWidgets.QLabel(self.centralwidget)
        self.lbl_generated_image.setGeometry(QtCore.QRect(420, 420, 241, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_generated_image.sizePolicy().hasHeightForWidth())
        self.lbl_generated_image.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_generated_image.setFont(font)
        self.lbl_generated_image.setTextFormat(QtCore.Qt.PlainText)
        self.lbl_generated_image.setObjectName("lbl_generated_image")
        self.btn_file_save_generated = QtWidgets.QPushButton(self.centralwidget)
        self.btn_file_save_generated.setGeometry(QtCore.QRect(460, 770, 141, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_file_save_generated.sizePolicy().hasHeightForWidth())
        self.btn_file_save_generated.setSizePolicy(sizePolicy)
        self.btn_file_save_generated.setObjectName("btn_file_save_generated")
        self.pb_training = QtWidgets.QProgressBar(self.centralwidget)
        self.pb_training.setGeometry(QtCore.QRect(350, 840, 451, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pb_training.sizePolicy().hasHeightForWidth())
        self.pb_training.setSizePolicy(sizePolicy)
        self.pb_training.setMaximum(1500)
        self.pb_training.setProperty("value", 0)
        self.pb_training.setObjectName("pb_training")
        self.btn_start_file_transfer = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start_file_transfer.setGeometry(QtCore.QRect(460, 870, 141, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_start_file_transfer.sizePolicy().hasHeightForWidth())
        self.btn_start_file_transfer.setSizePolicy(sizePolicy)
        self.btn_start_file_transfer.setObjectName("btn_start_file_transfer")
        self.plbl_content_image = QtWidgets.QLabel(self.centralwidget)
        self.plbl_content_image.setGeometry(QtCore.QRect(40, 50, 300, 300))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plbl_content_image.sizePolicy().hasHeightForWidth())
        self.plbl_content_image.setSizePolicy(sizePolicy)
        self.plbl_content_image.setText("")
        self.plbl_content_image.setPixmap(QtGui.QPixmap("C:/Users/bende/Pictures/dflt.png"))
        self.plbl_content_image.setObjectName("plbl_content_image")
        self.plbl_style_image = QtWidgets.QLabel(self.centralwidget)
        self.plbl_style_image.setGeometry(QtCore.QRect(710, 40, 300, 300))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plbl_style_image.sizePolicy().hasHeightForWidth())
        self.plbl_style_image.setSizePolicy(sizePolicy)
        self.plbl_style_image.setText("")
        self.plbl_style_image.setPixmap(QtGui.QPixmap("C:/Users/bende/Pictures/dflt.png"))
        self.plbl_style_image.setObjectName("plbl_style_image")
        self.plbl_gen_image = QtWidgets.QLabel(self.centralwidget)
        self.plbl_gen_image.setGeometry(QtCore.QRect(380, 460, 300, 300))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plbl_gen_image.sizePolicy().hasHeightForWidth())
        self.plbl_gen_image.setSizePolicy(sizePolicy)
        self.plbl_gen_image.setText("")
        self.plbl_gen_image.setPixmap(QtGui.QPixmap("C:/Users/bende/Pictures/dflt.png"))
        self.plbl_gen_image.setObjectName("plbl_gen_image")
        self.lbl_nst_status = QtWidgets.QLabel(self.centralwidget)
        self.lbl_nst_status.setGeometry(QtCore.QRect(350, 813, 361, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_nst_status.sizePolicy().hasHeightForWidth())
        self.lbl_nst_status.setSizePolicy(sizePolicy)
        self.lbl_nst_status.setObjectName("lbl_nst_status")
        self.gb_options = QtWidgets.QGroupBox(self.centralwidget)
        self.gb_options.setGeometry(QtCore.QRect(40, 450, 191, 121))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gb_options.sizePolicy().hasHeightForWidth())
        self.gb_options.setSizePolicy(sizePolicy)
        self.gb_options.setObjectName("gb_options")
        self.lbl_content_weight = QtWidgets.QLabel(self.gb_options)
        self.lbl_content_weight.setGeometry(QtCore.QRect(80, 80, 101, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_content_weight.sizePolicy().hasHeightForWidth())
        self.lbl_content_weight.setSizePolicy(sizePolicy)
        self.lbl_content_weight.setObjectName("lbl_content_weight")
        self.sb_style_weight = QtWidgets.QSpinBox(self.gb_options)
        self.sb_style_weight.setGeometry(QtCore.QRect(10, 50, 61, 22))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sb_style_weight.sizePolicy().hasHeightForWidth())
        self.sb_style_weight.setSizePolicy(sizePolicy)
        self.sb_style_weight.setMaximum(500)
        self.sb_style_weight.setProperty("value", 40)
        self.sb_style_weight.setObjectName("sb_style_weight")
        self.sb_content_weight = QtWidgets.QSpinBox(self.gb_options)
        self.sb_content_weight.setGeometry(QtCore.QRect(10, 80, 61, 22))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sb_content_weight.sizePolicy().hasHeightForWidth())
        self.sb_content_weight.setSizePolicy(sizePolicy)
        self.sb_content_weight.setMaximum(500)
        self.sb_content_weight.setProperty("value", 60)
        self.sb_content_weight.setObjectName("sb_content_weight")
        self.lbl_style_weight = QtWidgets.QLabel(self.gb_options)
        self.lbl_style_weight.setGeometry(QtCore.QRect(80, 50, 101, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_style_weight.sizePolicy().hasHeightForWidth())
        self.lbl_style_weight.setSizePolicy(sizePolicy)
        self.lbl_style_weight.setObjectName("lbl_style_weight")
        self.lbl_content_seed = QtWidgets.QLabel(self.gb_options)
        self.lbl_content_seed.setGeometry(QtCore.QRect(80, 20, 101, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_content_seed.sizePolicy().hasHeightForWidth())
        self.lbl_content_seed.setSizePolicy(sizePolicy)
        self.lbl_content_seed.setObjectName("lbl_content_seed")
        self.sb_content_seed = QtWidgets.QDoubleSpinBox(self.gb_options)
        self.sb_content_seed.setGeometry(QtCore.QRect(10, 20, 62, 22))
        self.sb_content_seed.setMaximum(1.0)
        self.sb_content_seed.setSingleStep(0.1)
        self.sb_content_seed.setProperty("value", 0.6)
        self.sb_content_seed.setObjectName("sb_content_seed")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.custom_ui_changes()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        # Autogenerated code from At Designer.
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "NST"))
        self.lbl_content_image.setText(_translate("MainWindow", "Content Image"))
        self.lbl_style_image.setText(_translate("MainWindow", "Style Image"))
        self.btn_file_select_content.setText(_translate("MainWindow", "Choose File..."))
        self.btn_file_select_style.setText(_translate("MainWindow", "Choose File..."))
        self.lbl_generated_image.setText(_translate("MainWindow", "Generated Image"))
        self.btn_file_save_generated.setText(_translate("MainWindow", "Save Image..."))
        self.pb_training.setFormat(_translate("MainWindow", "%p / %m epochs"))
        self.btn_start_file_transfer.setText(_translate("MainWindow", "Begin Style Transfer"))
        self.lbl_nst_status.setText(_translate("MainWindow", "Status:"))
        self.gb_options.setTitle(_translate("MainWindow", "Options"))
        self.lbl_content_weight.setToolTip(_translate("MainWindow", "<html><head/><body><p>Set weighting for content in calculation of difference between current generated image and input images. A higher weighting will put more emphasis on the content of the image. In original paper, this corresponds to hyperparameter α.</p></body></html>"))
        self.lbl_content_weight.setText(_translate("MainWindow", "Content Weighting"))
        self.sb_style_weight.setToolTip(_translate("MainWindow", "<html><head/><body><p>Set weighting for style in calculation of difference between current generated image and input images. A higher weighting will put more emphasis on the style of the image. In original paper, this corresponds to hyperparameter β.</p></body></html>"))
        self.sb_content_weight.setToolTip(_translate("MainWindow", "<html><head/><body><p>Set weighting for content in calculation of difference between current generated image and input images. A higher weighting will put more emphasis on the content of the image. In original paper, this corresponds to hyperparameter α.</p></body></html>"))
        self.lbl_style_weight.setToolTip(_translate("MainWindow", "<html><head/><body><p>Set weighting for style in calculation of difference between current generated image and input images. A higher weighting will put more emphasis on the style of the image. In original paper, this corresponds to hyperparameter β.</p></body></html>"))
        self.lbl_style_weight.setText(_translate("MainWindow", "Style Weighting"))
        self.lbl_content_seed.setToolTip(_translate("MainWindow", "<html><head/><body><p>Set generated image seeding percentage with content image. 0.00 will begin style transfer with an entirely white noise image, 1.00 will begin with the unaltered content image.</p></body></html>"))
        self.lbl_content_seed.setText(_translate("MainWindow", "Image Content Seed"))
        self.sb_content_seed.setToolTip(_translate("MainWindow", "<html><head/><body><p>Set generated image seeding percentage with content image. 0.00 will begin style transfer with an entirely white noise image, 1.00 will begin with the unaltered content image.</p></body></html>"))

    def custom_ui_changes(self):
        """
        Apply custom changes to UI not made in Qt Designer.
        :return:
        """
        self.pb_training.setFormat("%p%")
        self.pb_training.setMaximum(100)
        self.btn_file_select_content.clicked.connect(self.get_content_filename)
        self.btn_file_select_style.clicked.connect(self.get_style_filename)
        self.btn_start_file_transfer.clicked.connect(self.start_nst)
        return

    def start_nst(self):
        """
        Begin neural style-transfer with selected content and style images.
        :return:
        """
        if(self.nst.CONTENT_PATH is None or self.nst.STYLE_PATH is None):
            err = QtWidgets.QMessageBox(self.centralwidget)
            err.setIcon(QtWidgets.QMessageBox.Critical)
            err.setText("Error")
            err.setInformativeText("Either content image or style image is not selected.")
            err.setWindowTitle("Error")
            err.show()
            return
        self.btn_start_file_transfer.setEnabled(False)
        self.btn_file_save_generated.setEnabled(False)
        self.lbl_nst_status.setText("Status: Initializing VGG16 network.")
        self.pb_training.reset()
        options = dict(content_path=self.nst.CONTENT_PATH,
                                              style_path=self.nst.STYLE_PATH,
                                              cost_alpha=self.sb_content_weight.value(),
                                              cost_beta=self.sb_style_weight.value(),
                                              content_ratio=self.sb_content_seed.value()
                                              )
        thread = threading.Thread(target=self.nst.neural_style_transfer,
                                  kwargs=options
                                  )
        ui_thread = NSTThread(self.nst, options)
        ui_thread.image_update.connect(self.update_gen_image)
        ui_thread.progress_update.connect(self.update_training_progress)
        ui_thread.finished.connect(self.nst_ui_cleanup)
        thread.start()
        ui_thread.start()
        return

    def update_gen_image(self):
        self.lbl_nst_status.setText("Status: Training generated image.")
        lg_clip = np.clip(self.nst.LATEST_GEN[0], 0, 255).astype('uint8')
        height, width, channel = lg_clip.shape
        qimg = QtGui.QImage(lg_clip.data, width, height, 3 * width, QtGui.QImage.Format_RGB888)
        self.plbl_gen_image.setPixmap(QtGui.QPixmap(qimg).scaled(300, 300, QtCore.Qt.IgnoreAspectRatio))
        return

    def update_training_progress(self, progress):
        self.pb_training.setValue(progress)
        return

    def nst_ui_cleanup(self):
        self.lbl_nst_status.setText("Status: Complete.")
        self.pb_training.setValue(self.pb_training.maximum())
        self.btn_start_file_transfer.setEnabled(True)
        self.btn_file_save_generated.setEnabled(True)
        return


    def update_nst_ui(self):
        while(self.nst.EPOCH_COMPLETE < 1):
            time.sleep(5)
        self.lbl_nst_status.setText("Status: Training generated image.")
        while (self.nst.EPOCH_COMPLETE < self.nst.MAX_EPOCH - 1):
            self.pb_training.setValue((self.nst.EPOCH_COMPLETE/self.nst.MAX_EPOCH) * 100)
            latest_gen = self.nst.LATEST_GEN
            lg_clip = np.clip(latest_gen[0], 0, 255).astype('uint8')
            height, width, channel = lg_clip.shape
            qimg = QtGui.QImage(lg_clip.data, width, height, 3 * width, QtGui.QImage.Format_RGB888)
            self.plbl_gen_image.setPixmap(QtGui.QPixmap(qimg).scaled(300, 300, QtCore.Qt.IgnoreAspectRatio))
            time.sleep(0.5)
        self.lbl_nst_status.setText("Status: Complete.")
        self.pb_training.setValue(self.pb_training.maximum())
        self.btn_start_file_transfer.setEnabled(True)
        self.btn_file_save_generated.setEnabled(True)
        return


    def get_content_filename(self):
        self.nst.CONTENT_PATH = self.open_file_dialog()
        pixmap = QtGui.QPixmap(self.nst.CONTENT_PATH)
        pixmap = pixmap.scaled(300, 300, QtCore.Qt.IgnoreAspectRatio)
        self.plbl_content_image.setPixmap(pixmap)
        return

    def get_style_filename(self):
        self.nst.STYLE_PATH = self.open_file_dialog()
        pixmap = QtGui.QPixmap(self.nst.STYLE_PATH)
        pixmap = pixmap.scaled(300, 300, QtCore.Qt.IgnoreAspectRatio)
        self.plbl_style_image.setPixmap(pixmap)
        return

    def open_file_dialog(self):
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Open File",
                                                            "", "Image Files (*.png *.jpg *.jpeg)")
        return filename
